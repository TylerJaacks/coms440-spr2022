
Avoiding redundant gotos
======================================================================

We saw two types of redundant gotos in the previous example:

(1)

  if (comp) goto L1
  goto L2
L2:

  -> can remove the "goto L2" because code will go there anyway


(2)

  if (comp) goto L1
  goto L2
L1:


If we negate the comparison

  if (!comp) goto L2
  goto L1
L1:

  -> we have case 1 and we can eliminate goto L1.


How to fix our code generator to be smarter about stuff like this?

(i) Don't even try b/c we will have an industrial strength optimization
    pass afterward to check for these

(ii) Add some info to the labels, basically have a special "fall through"
     label meaning "fall through to the next instruction that would be
      executed sequentially".

    In practice: lots of ways to implement, e.g.
        label 0 for fall through
        null pointer to label object for fall through
        etc.

How to adjust all the semantic rules to handle this?

Let's update the earlier rules to use fall through:


S -> if ( B ) S1 ;

Old generate:                        New generate:
-----------------------------------  -----------------------------------
void generate(label next)            void generate(label next)
{                                    {
  label truept = new_label();          B.generate(fall_through, next);
  B.generate(truept, next);            S1.generate(next);
  output_label(truept);              }
  S1.generate(next);
}


S -> if ( B ) S1 ; else  S2 ;

Old generate:                        New generate:
-----------------------------------  -----------------------------------
void generate(label next)            void generate(label next)
{                                    {
  label tpart = new_label();
  label fpart = new_label();             label fpart = new_label();
  B.generate(tpart, fpart);              B.generate(fall_through, fpart);
  output_label(tpart);
  S1.generate(next);                     S1.generate(next);
  output_instruction("goto", next);      output_instruction("goto", next);
  output_label(fpart);                   output_label(fpart);
  S2.generate(next);                     S2.generate(next);
}                                    }                ^ maybe fall through?


Boolean expressions:

B -> B1 && B2


Old generate(label t, label f):      New generate(label t, label f)
-----------------------------------  -----------------------------------
{                                    { // Fix: if false was fall through
  label b1t = new_label();             label b1f = (f != fall_through) ?
  B1.generate(b1t, f);                              f : new_label();
  output_label(b1t);                   B1.generate(fall_through, b1f);
  B2.generate(t, f);                   B2.generate(t, f);
}                                      if (f == fall_through)
                                          output_label(b1f);
                                     }

B -> B1 || B2


Old generate(label t, label f):      New generate(label t, label f)
-----------------------------------  -----------------------------------
{                                    { // Fix: if false was fall through
  label b1f = new_label();             label b1t = (t != fall_through) ?
  B1.generate(t, b1f);                              t : new_label();
  output_label(b1f);                   B1.generate(b1t, fall_through);
  B2.generate(t, f);                   B2.generate(t, f);
}                                      if (t == fall_through)
                                          output_label(b1t);
                                     }

The big one:

B -> E1 relop E2

Old generate(label t, label f):      New generate(label t, label f)
-----------------------------------  -----------------------------------
{                                    {
  label next1 = new_label();
  E1.generate(next1);
  output_label(next1);
  label next2 = new_label();
  E2.generate(next2);                     (same)
  output_label(next2);                    (same)
  output_instruction("if", E1.addr,       if (t != fall_through) &&
    relop, E2.addr, "goto", t);              (f != fall_through)
  output_instruction("goto", f);          {
}                                             output_instruction("if", E1.addr,
                                                relop, E2.addr, "goto", t);
                                              output_instruction("goto", f);
                                          }  else if (t != fall_through) {
                                              // f is fall through
                                              output_instruction("if", E1.addr,
                                                relop, E2.addr, "goto", t);
                                              // no goto false b/c fall through
                                          }  else if (f != fall_through) {
                                              // t is fall through
                                              // invert comparison
                                              output_instruction("if", E1.addr,
                                                !relop, E2.addr, "goto", f);
                                              // no goto true b/c fall through
                                          } else {
                                             // both are fall through?
                                             //
                                          }


Adjusting the huge example from last time:

Code generation in order:
------------------------------------------------------------

(1)  S -> S1 S2
          copied from generate() earlier:

      label middle = new_label();     // L1
      S1.generate(middle);            // L1
      output_label(middle);
 (10) S2.generate(next);              // next is irrelevant


(2) S1 generate with next label L1

      label fpart = new_label();      // L2
  (3) B.generate(fall_through, L2);
  (8) S3.generate(L1);  // be clever about next!
      output_instruction("goto", L1);
      output_label(L2);
  (9) S4.generate(L1);


(3) B.generate(fall_through, L2)     B -> B1 || B2

      label b1t = new_label // b/c t is fall_through  // L3
  (4) B1.generate(L3, fall_through)
  (5) B2.generate(fall_through, L2)
      output_label(L3)


(4) B1.generate(L3, fall_through)     B1 -> E1 > E2

      E1.generate();
      E2.generate();
      output_instruction("if", x, >, 15, "goto", L3);


(5) B2.generate(fall_through, L2)     B2 -> B3 && B4

  (6) B3.generate(fall_through, L2);
  (7) B4.generate(fall_through, L2);


(6) B3.generate(fall_through, L2)     B3 ->  E3 (y) < E4 (0)

      E3.generate();
      E4.generate();
      output_instruction("if", y, >=, 0, "goto", L2);

(7) B4.generate(fall_through, L2);    B4 -> E5 (z) < E6 (0);

      E5.generate();
      E6.generate();
      output_instruction("if", z, >=, 0, "goto", L2);

Output code:
------------------------------------------------------------


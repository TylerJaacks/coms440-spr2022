Semantic analysis aka type checking and such
======================================================================

* Last phase in the  front-end

* Can sometimes be done during parsing
  or could be done in a separate "pass"

* We'll assume the parser builds a parse tree or
  more likely an AST (abstract syntax tree)

  (ASTs can ignore things like  S -> P )

* Semantic analysis could use the AST or could be done
  while building the AST.

Main jobs of semantic analysis pass:
------------------------------------------------------------
* Extract and check types and other info from input program
* Check any language rules that go beyond the grammar
  e.g. when you call function f(a, b, c):
      (1) there's a prototype for function f
      (2) function f takes 3 parameters
      (3) types of parameters match

* Could be other errors (e.g., break not within a loop)

    int foo()
    {
        break;    /* part 6 error */
    }

* Assign storage locations for variables (and maybe functions?)


Type systems
======================================================================
A type defines
  * a set of value (possibly machine dependent)
  * a collection of operations that could be done on those values

E.g.
    Boolean:
        * set of value {true, false}
        * operations: not, and, or, xor, nand

    integers:
        * set of values: conceptually Z (set of all integers)
          in practice {-2^31, ..., 2^31-1}

        * operations: +, -, *, /, %


A type system is a collection of rules that assign types to program constructs.

  * provide a concise formalization of semantic checking rules
  * rules are defined on the structure of expressions

Each language may define its own type system.


Why type systems
----------------------------------------------------------------------
* Help detect errors AT COMPILE TIME!!!!
    -> can't add integer to a string
    -> can't modify const variables
    -> can't access private field/method outside the class


* Help the compiler produce faster code
    For example:
      x+y
    What would "type checking at runtime" look like here?
      you'd have code like
        if x,y are integers then do integer +
        else if x,y are reals then do double +
        else if x,y are strings then do concatenation
        else ...


Some terminology:
Type checking: process of verifying fully typed programs
              technically - assignments ( =, or passing parameters)

Type inference: process of determining the type of something
                  (usually an expression, could be a variable)

Statically typed languages:
  most/all type checking occurs at compile time
  C, C++, Java

Dynamically typed languages:
  most/all type checking occurs at runtime
  Python, Scheme, Javascript

Untyped languages:
  No type checking
  assembly language (sort of?)
  bash (ok kind of but everything is a string)

Soundness:
  A type system is sound if,
  for all expressions E,
  the type system prediction for type of E at compile time
  =
  the actual type of E at runtime


In designing a type system, there are usually tradeoffs between
    flexibility (not constraining the programmer) and
    soundness / safety

C always chooses flexibility


More defs:

Type coercion (or conversion): change of type, usually implicit

e.g.
    int x = 'a';      // char coerced to an int
    float y = x;      // int coerced into a float

Usually:
  * coercions are allowed implicitly if the new type's set of values
      is a superset of the old type's set of values.
      (no information loss)

        bool p = 1;   {0, 1} range
        int x = p;


  * "narrowing" coercion: new type set of values is a subset of old type
      then this is usually required to be explicit
      i.e., usually requires a cast

      (C doesn't!!!! for integers)

      int x = 275619875615;
      char c = x;

      This could lose information so thus normally
      you must explicitly cast

  * int -> float

    this is usually allowed implicitly even though you could lose information


Implicit coercions (widening extra credit for part 4):

  * makes type checking a bit more complicated

  * C++ can have user-defined implicit type coercions!


Coercions to and from const

  int foo(const int a)    // this says a will not be changed inside foo
  {

  }

  when we call foo, we can put in a regular non-const int or a const one

  int x;
  x=3;
  foo(x)
  x=4;


  const int a = x;    // also allowed b/c we must be able to initialize
                      // const variables


So we can initialize a const variable from a non-const one.


  int foo(const int a[])    // this still says a won't be changed
  {
      a[3] = 7;   // error
  }

  int A[50];

  foo(A);


What about the other way?

  int foo(int a)    // this says foo could modify a
  {
  }

  const int pi = 3;
  foo(pi);    // fine because we're copying pi into a

  int x = 4;
  x = pi;

^^^^ All this is fine b/c not arrays

  int foo(int a[])    // this says foo could modify a
  {
  }

  const int A[5] = { 1, 2, 3, 4, 5 };
  foo(A);   // NOT ALLOWED


Subtypes
----------------------------------------------------------------------
* If S is a subtype of T, it means
  we can safely use an item of type S
  anywhere an item of type T is expected.
      -> all operations on T can also be performed on S


* Usually this is for polymorphism / class hierarchy stuff

  i.e.
    if class S is derived from class T, then
    S is a subtype of T

* We now have (maybe) a situation where we know an object is of type T
    but we don't know exactly which subtype it is.

* Usually then the soundness definition is relaxed

    for all expressions E, if the type system predicts that E has type T
    (at compile time)
    then the actual type of E (at runtime) is a subtype of T

    (Any type is a subtype of itself)


Type inference / synthesis
----------------------------------------------------------------------
Given
  * a type system
  * an expression

How to determine the type of the expression?

This is an example of something called a "synthesized attribute"

-> can build by traversing the AST
   from the bottom up

-> for a node like
    x + y
    (left child will be x, right child will be y)
    get type of x
    get type of y
    determine type of x+y using type system rules

-> All of this is more tricky with things like
      coersions
      user-defined types
      subtypes
      function overloading

Example of type synthesis / preview of attribute grammars
------------------------------------------------------------
Type system
    int {+,-,*,/,%} int   ->  int
    float {+,-,*,/} int,float -> float
    int,float {+,-,*,/} float -> float

Build the type for

    (3*x + 7)/4

Grammar:
  S -> S + P
  S -> S - P
  S -> P
  P -> P * T
  P -> P / T
  P -> T
  T -> ident
  T -> number
  T -> ( S )


Parse tree:
                     S
                     |
                     P
                    /|\
                   / | \
                  P  /  T
                 /      |
                /      number
               T         4
              /|\
             / | \
            /  |  \
           (   S   )
              /|\
             / | \
            /  |  \
           S   +   P
          /        |
         /         T
        /          |
       P          number
      /|\           7
     / | \
    P  *   P
    |      |
    T      T
    |      |
  number   ident
    3      x


Then we start at the leaves and push up the type information.

Note an AST could shrink this down to something like:

            /
          /   \
         /     4
        +
       / \
      /   \
     *     7
    / \
   /   \
  3     x


That's it for types.




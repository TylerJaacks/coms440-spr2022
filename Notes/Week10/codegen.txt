
Intermediate code generation (ch 6)
======================================================================

* Goal: start from AST
        end with code in some intermediate representation (IR)


We might instead use a directed acyclic graph (DAG) to represent expressions
because they naturally expose repeated sub-expressions.

  -> nodes can have more than one parent
  -> common sub-expressions will be nodes that are "shared"
      i.e. have more than one parent


Consider expression
  (x+1)*(x+1) + 2*(x+1)*(y-1) + (y-1)*(y-1) - x*y


AST:

                      +
            _________/ \_____
           /                 \
          *                   +
     ____/ \___           ___/ \_________
    /          \         /               \
    +          +        *                 -
   / \        / \      / \               /  \_____
  x   1      x   1    2   *             *         \
                         / \           / \         *
                        /   \         /   \       / \
                       +     -       -     -     x   y
                      / \   / \     / \   / \
                     x   1 y   1   y   1 y   1


DAG:

                      +
            _________/ \_____
           /                 \
          *                   +
     ____/ \___           ___/ \_________
    /          \         /               \
    \           \       *                 -
     \           \     / \               /  \_____
      \____      |    2   *             *         \
           \_____|       / \______     / |         *
                  \___  /         \_  /_/         / \
                       +             -           |    other y
                      / \           / \        other x
                     x   1         y   1


Idea is to squeeze out all the repeated computations

AST: 14 computation nodes
DAG: 10 compuation nodes

Question:
  (1) Can we always merge common subexpressions?
  (2) How can we build this DAG efficiently?

(1) Can we always merge?

    What about x++?

    Any subexpression that has "side effects" (like changing a variable,
    writing to a file, etc) should not be merged.

    (Avoid merging for function calls or assignments)

(2) How can we build this DAG efficiently?

Idea:
  * use the same algorithm to build the AST
  * whenever we create a new node, before adding to the DAG
    check if it matches an exsiting node
        if yes: discard the new one, and re-use the old one
        if no : use the new one

  * in practice: hash table of nodes

Code would look something like this:

AST:
  node* createNode(node* left, operator op, node* right)
  {
    node* n = malloc(sizeof(node));
    if (0==n) exit(1);    // out of memory

    n->left = left;
    n->op = op;
    n->right = right;

    return n;
  }


DAG:
  node* createNode(node* left, operator op, node* right)
  {
    node* find = FindExistingNode(left, op, right);     /* NEW */
      // assume this returns null if no match
    if (find) return find;                              /* NEW */

    node* n = malloc(sizeof(node));
    if (0==n) exit(1);    // out of memory

    n->left = left;
    n->op = op;
    n->right = right;

    AddToNodes(n);      /* NEW */
    return n;
  }

Need to implement FindExistingNode, AddToNodes
(recommended: hash table)


Value number method:
------------------------------------------------------------
* Store DAG nodes in an array of structs
* Interior nodes:
      operator code
      left node (number: array index)
      right node (number: array index)

* Leaf:
      operator code: literals, variables, etc
      left: pointer to symbol table for vars,
            either the actual literal or maybe pointer to literal table
                for literals

The array index is called the value number of the node/expression.

Usually: the number of the children is lower than the number
          of the node



Example value number array thingy:


                      + #14
            _________/ \_____
           /                 \
     #4   *                   +  #13
     ____/ \___           ___/ \_________
    /          \         /               \
#3  +       #3 +        * #9              - #12
   / \        / \      / \               /  \_____
  x   1      x   1    2   *  #8     #10 *         \
#1   #2              #5  / \           / \         * #11
                        /   \         /   \       / \
                    #3 +     - #7 #7 -   #7-     x   y
                      / \   / \     / \   / \
                     x   1 y   1   y   1 y   1
                          #6  #2


Array:

index | code       | left  | right
======+============+=======+=========
  0   | unused     |       |
  1   | variable   |  x    |
  2   | int lit.   |  1    |
  3   | + (int)    |  #1   |  #2              # means array index
  4   | * (int)    |  #3   |  #3
  5   | int lit.   |  2    |
  6   | var.       |  y    |
  7   | - (int)    |  #6   |  #2
  8   | * (int)    |  #3   |  #7
  9   | * (int)    |  #5   |  #8
 10   | * (int)    |  #7   |  #7
 11   | * (int)    |  #1   |  #6
 12   | - (int)    |  #10  |  #11
 13   | + (int)    |  #9   |  #12
 14   | + (int)    |  #4   |  #13


Note:
  • We always append to the array, no deletions.
  • We always build the children of a node before the node
Therefore:
  • The value number of a node is always greater than the value
    number of any children
  • This gives a possible execution order to compute the expression.



Three-address code
======================================================================
Idea:
  • at most one operator on the right hand side
  • lhs will be a program variable or a compiler-generated temp.
     -> in both cases I'll write this as a variable name
     -> using names allows us to reorder instructions if needed
  • at most 3 vars/temps/values per instruction
  • "easy" to generate from the DAG.

                      + #14
            _________/ \_____
           /                 \
     #4   *                   +  #13
     ____/ \___           ___/ \_________
    /          \         /               \
#3  +       #3 +        * #9              - #12
   / \        / \      / \               /  \_____
  x   1      x   1    2   *  #8     #10 *         \
#1   #2              #5  / \           / \         * #11
                        /   \         /   \       / \
                    #3 +     - #7 #7 -   #7-     x   y
                      / \   / \     / \   / \
                     x   1 y   1   y   1 y   1
                          #6  #2

We need compiler-generated temps: t3, t4, t7, t8, t9, t10, t11, t12, t13, t14

Three address code for expression:
  (x+1)*(x+1) + 2*(x+1)*(y-1) + (y-1)*(y-1) - x*y


t3 = x + 1
t4 = t3 * t3
t7 = y - 1
t8 = t3 * t7
t9 = 2 * t8
t10 = t7 * t7
t11 = x * y
t12 = t10 - t11
t13 = t9 + t12
t14 = t4 + t13
// t14 hold the result of
// (x+1)*(x+1) + 2*(x+1)*(y-1) + (y-1)*(y-1) - x*y

More on this three address code:

An address is one of:
  • A source-program variable (name)
    (in practice we could point to the symbol table entry)

  • A literal (constant)

  • A compiler-generated temporary.
    For now: no effort to reduce or re-use temporaries.


What are the instructions?
Depends on the IR.  But the following are pretty typical:

(1) Assignments of the form

    x = y (op) z

    x, y, z: addresses
    op is a binary operator, might also specify type
    x is not a literal, must be a source var or compiler temp.


(2) Assignments of the form

    x = (op) y

    op: unary operator (-, !, ~) or could be "cast" like "int to float"
    x, y are addresses
    x is not a literal

(3) Copy instructions

    x = y

(4) Unconditional jumps

    goto L

    L: label of some three-address instruction

(5) conditional jumps

        ifTrue x goto L
        ifFalse x goto L

    x: address
    L: label

(6) fancier conditional jumps

        if x (relop) y goto L

    x,y: addresses
    L  : label

    relop: some comparison operator like >, >=, <, <=, ==, !=

    But why b/c we could have either:

      t5 = x < y
      iftrue t5 goto L

    is the same as

      if x < y goto L


    This is a design decision but generally it is preferred to use

    if x < y goto L

    b/c it retains structure and we can always convert to more instructions
    when generating target code if needed.


(7) Procedure calls

    Use multiple instructions like

        param x to set a parameter
          x is an address

        call p,n
          p is some procedure
          n is number of parameters we're passing

    Use

        return y
          y is an address

For example:

    If we want to call function foo(x1, x2, x3+7, x4):

        param x1
        param x2
        t5 = x3 + 7
        param t5
        param x4
        call foo, 4


(8) Arrays?

      y = x [ i ]
      x[i] = y

      x, y, i are addresses
      x is an array address
          index i:  could be the actual array index
                    could be the byte offset



(9) Pointer referencing/ dereferencing

    x = &y      // get the address of a storage location
    x = *y      // get what's stored at address y


Example:

Source code:

  do {
    i = i + 1;
  } while (a[i] < v);


Three address code (by hand):

  L1:
        t1 = i + 1;
        i = t1;       // i = i+1
        t2 = i * 8;   // b/c arrays use byte offsets
        t3 = a[t2];   // get a[i]
        if t3 < v goto L1



Stack machines:
======================================================================
In a stack machine, most operations pull their arguments from
a runtime stack.
  -> need operations to push literals, vars, etc onto the stack
  -> operations don't specify addresses


Common instruction forms:

(1)   push  x
        x is a program variable or literal

      push  x[i]
        if x is an array
        x, i could come from the stack


(2)   pop  x
        pop and store into x and

      pop  x[i]
        again x, i might come from the stack




More of these on Monday!



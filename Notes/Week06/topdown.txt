
How to compute first and follow sets?
======================================================================

First: what's the first symbol that could appear
------------------------------------------------------------

  * for any terminal symbol t, First(t) = { t }
    we can include epsilon
    First(epsilon) = { epsilon }

  * For any non-terminal symbol A

    Initialize First(A) = { }

    For each production of A, A -> B1 B2 ... Bn
        add everything in First(B1) to First(A) except epsilon

        if epsilon is in First(B1) then
            add everything in First(B2) to First(A) except epsilon
            if epsilon is in First(B2) then

                add everything in First(B3) to First(A) except epsilon
                  ...

                  add everything in First(Bn) to First(A), including epsilon



  * For any sequence alpha = X1 X2 ... Xn

    Initialize First(alpha) to { }
      Add everything in First(X1) to First(alpha) except epsilon..

        (essentially the same)


Example(s):

(1) S -> S + P
(2) S -> P
(3) P -> P * number
(4) P -> number

First(S)?
  prod 1 says: add First(S+P) to First(S)
    and maybe more if epsilon is in First(S) but we don't know that yet

  prod 2 says: add First(P) to First(S)


First(P)?
  prod 3: says: add First(P*number) to First(P)

  prod 4: says add First(number) to First(P)
        -> number is in First(P)

First(P) = { number }
First(S) = { number }


Building Follow(A): what comes after A in any derivation
------------------------------------------------------------

Apply these rules until nothing more can be added

* If S is the start symbol, add $ to Follow(S)
      ($ is a special "end of input" token)

* For nonterminals A, B
  and any sequence alpha, gamma

    if there is a production  A -> alpha B gamma
    then add everything except epsilon in First(gamma) to Follow(B)

    if epsilon in First(gamma) then add Follow(A) to Follow(B)

Example(s):

(1) S -> S + P
(2) S -> P
(3) P -> P * number
(4) P -> number

  Follow(S) = { $, + }
  Follow(P) = { $, +, * }

first rule adds $ to Follow(S)

  production 1 says add First(+P) to Follow(S) : that's +
  production 2 says add Follow(S) to Follow(P)

  production 3 says add First(*P) to Follow(P) : that's *


S $
...
(some sentence) $


Building a predictive, recursive descent parser
------------------------------------------------------------

M[A, x] : which production to use on grammar symbol A,
          when the next input symbol is x

Initialize M[A, x] to empty set for all A, x

For each production A -> alpha in the grammar, do
  (1) For each terminal x in First(alpha),
        add A -> alpha to M[A, x]
  (2) If epsilon is in First(alpha), then
        for each terminal x or $ in Follow(A),
          add A->alpha to M[A, x]
End for

If |M[A, x]| > 1 then fail  (the grammar as given is not LL(1))

For our example grammar:

  (3) P->P*number
        what's First(P)?  First(P) = {number}
        add (3) to M[P, number]

  (4) P->number
        add (4) to M[P, number]

        FAIL


The algorith fails if there are productions for a symbol X
    X -> alpha
    X -> beta

    when First(alpha) \cap First(beta) then the algorithm will fail


Can we fix it with right recursion?

  S -> P + S
  S -> P
  P -> number * P
  P -> number

(Ignore: this is right associative, other was left assoc.)

This will also FAIL and for the same reason.

Need to remove right recursion!

Here's a common, "simple" case
------------------------------------------------------------

  A -> A alpha
  A -> beta

This could derive what?

  beta
  beta alpha
  beta alpha alpha
  beta alpha alpha alpha ...

  A' -> beta A"
  A" -> alpha A"
  A" -> epsilon

Can generalize this
  A -> A alpha1
  A -> A alpha2
  ...
  A -> A alpham
  A -> beta1
  ...
  A -> betan

rewrites to

  A' -> beta1 A" | beta2 A" | ... | betan A"
  A" -> alpha1 A" | alpha2 A" | ... | alpham A" | epsilon

------------------------------------------------------------

Rewrite this left-recursive grammar:

  S -> S + P
  S -> P
  P -> P * number
  P -> number

Get:

S' -> P' S"
S" -> + P' S"       /* S" : zero or more +P'    */
S" -> epsilon

P' -> number P"
P" -> * number P"   /* P" : zero or more *number  */
P" -> epsilon

First(S') : First(P') : { number }
First(S") : { +, epsilon }

First(P') : First(number) : { number }
First(P") : { *, epsilon }

Follow(S') : { $ }
Follow(S") : { $ }
  S' -> P' S" says add Follow(S') to Follow(S")

Follow(P') : { +, $ }
  S' -> P' S" says add First(S") to Follow(P') except epsilon
  epsilon in S" says add Follow(S') to Follow(P')

Follow(P") : { +, $ }
  P' -> number P" says add Follow(P') to Follow(P")


======================================================================
Building the LL(1) parser if we can
======================================================================

(1) S' -> P' S"
(2) S" -> + P' S"       /* S" : zero or more +P'    */
(3) S" -> epsilon

(4) P' -> number P"
(5) P" -> * number P"   /* P" : zero or more *number  */
(6) P" -> epsilon

Prod1:
  for each x in First(P' S") , make M[S', x] = (1)
  -> M[S', number] = (1)

Prod2:
  for each x in First(+ P' S"), make M[S", x] = (2)
  -> M[S", +] = (2)

Prod3:
  for each terminal x or $ in Follow(S"), add (2) to M[S", x]
  -> M[S", $] = (3)

Prod4:
  for each x in First(number P"),
  -> M[P', number] = (4)

Prod5:
  for each x in First(* number P"),
  -> M[P", *] = (5)

Prod6:
  for each terminal x or $ in Follow(P"), add (6)
  -> M[P", +] = (6)
  -> M[P", $] = (6)

No conflicts!

S'()
{
  if (next token is number)
  {
    P'()
    S"()
  }
  else syntax error
    "We expected a number, instead we saw (token)"
}

S"()
{
  if (next token is +)
  {
    match(+)    // make sure next token is + and advance to next token
    P'()
    S"()
  }
  else if (next token is $)
  {
    // do nothing to match epsilon
  } else
  {
    syntax error
        expected + got ?
  }
}

P'()
{
  if (next token is number)
  {
    match(number)
    P"()
  }
  else syntax error
}

P"()
{
  switch (next token)
      case *:
        match(*)
        match(number)
        P"()
        break;

      case +:
      case $
          // epsilon
        break

      default:
        syntax error
}


// We could tweak this code some for example let's "fix" S"


S"()
{
  if (next token is +)
  {
    match(+)    // make sure next token is + and advance to next token
    P'()
    S"()
  }
  else if (next token is $)
  {
    // do nothing to match epsilon
  } else
  {
    syntax error
        expected + got ?
  }
}

Ok new and improved:

S"()
{
  while (next token is +)
  {
    match(+)
    P'()
  }
  if next token is not $ then syntax error
}

Ok new and more improved?

S"()
{
  while (next token is not $)
  {
    match(+)    // any other tokens cause a syntax error here
    P'()
  }
}

If we combine S' and S" we get

S'()
{
  P'()
  while (next token is not $)
  {
    match(+)    // any other tokens cause a syntax error here
    P'()
  }
}

^^^^^ This is the code from day 1 wimpy compiler

============================================================

Let's generalize this for expressions with precedence levels

T: terms (numbers, variables)

En: expression for binary ops of prec level n
    (higher integer n means higher precedence)


left associative:

En -> En (op) En+1            S -> S + P
En -> En+1                    S -> P

right assoc:

En -> En+1 (op) En
En -> En+1


En()
{
  En+1()
  while (next operator has precedence n)
  {
    consume a level n prec operator
    En+1()
  }
}


Example:

  x < y + z

  x < (y+z)

suppose < has prec 5, and + has prec 8

    E1
    |
    v
    E2
    |
    v
    E3
    |
    v
    E4
    |
    v
    E5
   /|\
  / | \
E5  <  E6
|       |
v       v
...    E7
|       |
v       v
Emax    E8
|       /|\
v      / | \
T     E8 +  E9
|     |     |
v     v     v
x     ..    ..
       T    T
       |    |
       v    v
       y    z


============================================================
============================================================
Precedence climbing algorithm
============================================================
============================================================
============================================================

expr(int min_prec)    // minimum prec level
{
    term()
    while next token is a binary op with prec >= min_prec
        op = next token
        consume next token
        if (op is left assoc)
            next_level = prec(op) + 1
        else
            next_level = prec(op)
        end if
        expr(next_level);
}


// What if we need to build a parse / AS tree

    <
   / \
  /   \
 x     +
      / \
     /   \
    y     z


To build a parse tree or AST:
Take our LL parse functions and have them return
nodes in a parse tree


node* expr(int min_prec)    // minimum prec level
{
    result = term()

    while next token is a binary op with prec >= min_prec
        op = next token
        consume next token
        if (op is left assoc)
            next_level = prec(op) + 1
        else
            next_level = prec(op)
        end if
        rhs = expr(next_level);
        result = new node(result, op, rhs)

    return result
}

======================================================================
Example sentence and trace the algo:
a + b - c * d $
              ^

+ : 4     left
- : 4     left
* : 7     left

expr(1):
  result = a
  while yes
  op = +
  next_level = 5
  rhs = expr(5)             expr(5):
  rhs is b                    result = b
  result (a+b)                return b
  while yes
  op = -                    expr(5)
                              result = c
                              while yes
                              op = *
                              expr(8)                 expr(8)
                              rhs is d                result = d
                              result is (c*d)         return d
                              return (c*d)

  rhs is (c*d)
  (a+b) - (c*d)

Will give a parse tree like

          -
        /   \
       /     \
      +        *
     / \      / \
    /   \    /   \
    a   b   c    d

a+b-(c*d)


Example sentence and trace the algo:
a + b - c * d $
            ^

+ : 4     right
- : 4     right
* : 7     right

expr(1):
  result = a
  while yes
  op = +
  next_level = 4
  rhs = expr(4)             expr(4):
                              result = b
                              while yes
                              op = -
                              rhs = expr(4)         expr(4):
                                                    result = c
                                                    while yes                                                                       op = *
                                                    rhs = expr(7)
                                                    rhs = d
                                                    result = (c*d)
                                                    return (c*d)
                              result = b - (c*d)
                              return (b - (c*d))
  result is a + (b - (c*d))

a + (b - (c*d))


            +
          /   \
         a      -
               /  \
              b     *
                   / \
                  c   d


a - b


  struct node {
    char type;    // v, c, i, f
    char is_array;
    char what_is_it;    // +, i, l
    char* name;
    struct node* left;
    struct node* right;
  }

term()

  node* buildBinary(node* left, tokentype op, node* right)




